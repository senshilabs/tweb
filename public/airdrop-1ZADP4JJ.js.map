{"version":3,"file":"airdrop-1ZADP4JJ.js","sources":["../src/components/telegramMini/airdrop.ts"],"sourcesContent":["import HmacEndPoint from './hmacEndpoint';\nimport confetti from './confetti';\nimport dashboard from './dashboard';\nimport {ContractHandler} from './contractHandler.js';\n\ntype ClaimableApiResponse = {\n    claimable: boolean;\n}\n\ntype ClaimApiResponse = {\n    claimable: boolean;\n    earned: number;\n}\n\nconst claimableApi = new HmacEndPoint<ClaimableApiResponse>('/claimable', 'GET');\nconst claimApi = new HmacEndPoint<ClaimApiResponse>('/claim', 'POST');\n\n\nexport class AirdropManager {\n  private airdropLayer: HTMLElement;\n  private airdropElement: HTMLElement;\n  private isAirdropFallen: boolean = false;\n\n  // AirdropManager의 초기화 및 필요 리소스 설정\n  public async init() {\n    this.airdropLayer = document.getElementById('airdrop-layer') as HTMLElement;\n    this.scheduleAirdropFetch();\n    const contract = new ContractHandler('EQBfMfM9a9j-ulMHZdtSkWFaAdyQU6Cjkyom9eGQAgCX8afW')\n    const isBoosting = await contract.isChannelBoosting(-1001983857786);\n    console.log({isBoosting})\n  }\n\n  // 서버에서 Airdrop 데이터를 주기적으로 가져옴\n  private scheduleAirdropFetch() {\n    setInterval(() => {\n      this.fetchClaimable();\n    }, 15_000);\n  }\n\n  // 서버 API를 호출하여 Airdrop 데이터를 가져옴\n  private async fetchClaimable() {\n    try {\n      const res = await claimableApi.fetchData();\n      this.createAirdropElement();\n    } catch(error) {\n      console.error('Error claiming airdrop:', error);\n    }\n  }\n\n  private async onAirdropClick() {\n    try {\n      this.removeAirdropElement();\n      const telegram_channel_id = window.location.href.split('#')[1].split('_')[0];\n      const body = {\n        telegram_channel_id\n      };\n      const res = await claimApi.fetchData(body);\n      console.log('Airdrop successfully claimed!');\n      confetti.addConfetti();\n      await dashboard.updateBalance();\n    } catch(error) {\n      this.removeAirdropElement();\n      console.error('Error claiming airdrop:', error);\n    }\n  }\n\n  // Airdrop UI 요소 생성 및 이벤트 핸들링\n  private createAirdropElement() {\n    if(this.isAirdropFallen) {\n      return;\n    }\n    this.airdropElement = document.createElement('div');\n    this.airdropElement.classList.add('chute');\n\n    const coin = document.createElement('div');\n    coin.classList.add('coin');\n\n    this.airdropElement.appendChild(coin);\n\n    this.airdropElement.addEventListener('click', this.onAirdropClick.bind(this));\n\n    this.animateAirdropElement(this.airdropElement);\n    this.airdropLayer.appendChild(this.airdropElement);\n    this.isAirdropFallen = true;\n  }\n\n  private removeAirdropElement() {\n    this.airdropElement.remove();\n    this.airdropElement = null;\n    this.isAirdropFallen = false;\n  }\n\n  // Airdrop 애니메이션\n  private animateAirdropElement(el: HTMLElement) {\n    function getRandomPosition() {\n      return Math.floor(Math.random() * (document.documentElement.clientWidth * 0.8));\n    }\n    const startX = getRandomPosition();\n    const endX = getRandomPosition();\n\n    el.style.cssText = `\n            width: 50px;\n            height: 50px;\n            position: absolute;\n            top: 0;\n            left: ${startX}px;\n        `;\n\n    const animationDuration = 10000; // 10초\n\n    // 세로 이동 애니메이션 (linear)\n    const verticalAnimation = el.animate([\n      {top: '-100px'},\n      {top: `${document.documentElement.clientHeight}px`}\n    ], {\n      duration: animationDuration,\n      easing: 'linear',\n      fill: 'forwards'\n    });\n\n    // 좌우 이동 애니메이션 (ease-in-out)\n    const horizontalAnimation = el.animate([\n      {left: `${startX}px`},\n      {left: `${endX}px`}\n    ], {\n      duration: animationDuration,\n      easing: 'ease-in-out',\n      fill: 'forwards'\n    });\n\n    // 애니메이션 종료 시 요소 제거\n    verticalAnimation.onfinish = () => {\n      this.removeAirdropElement();\n    };\n  }\n}\n\n// 모듈화를 위해 default export 사용\nexport default new AirdropManager();\n"],"names":["claimableApi","HmacEndPoint","claimApi","AirdropManager","isBoosting","ContractHandler","res","error","body","confetti","dashboard","coin","el","getRandomPosition","startX","endX","animationDuration","verticalAnimation","airdrop"],"mappings":"mJAcA,MAAMA,EAAe,IAAIC,EAAmC,aAAc,KAAK,EACzEC,EAAW,IAAID,EAA+B,SAAU,MAAM,EAG7D,MAAME,CAAe,CAArB,aAAA,CAGL,KAAQ,gBAA2B,EAAA,CAGnC,MAAa,MAAO,CACb,KAAA,aAAe,SAAS,eAAe,eAAe,EAC3D,KAAK,qBAAqB,EAE1B,MAAMC,EAAa,MADF,IAAIC,EAAgB,kDAAkD,EACrD,kBAAkB,aAAc,EAC1D,QAAA,IAAI,CAAC,WAAAD,CAAA,CAAW,CAC1B,CAGQ,sBAAuB,CAC7B,YAAY,IAAM,CAChB,KAAK,eAAe,GACnB,IAAM,CACX,CAGA,MAAc,gBAAiB,CACzB,GAAA,CACI,MAAAE,EAAM,MAAMN,EAAa,YAC/B,KAAK,qBAAqB,QACpBO,EAAO,CACL,QAAA,MAAM,0BAA2BA,CAAK,CAChD,CACF,CAEA,MAAc,gBAAiB,CACzB,GAAA,CACF,KAAK,qBAAqB,EAE1B,MAAMC,EAAO,CACX,oBAF0B,OAAO,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,CAEzE,EAEIF,EAAM,MAAMJ,EAAS,UAAUM,CAAI,EACzC,QAAQ,IAAI,+BAA+B,EAC3CC,EAAS,YAAY,EACrB,MAAMC,EAAU,sBACVH,EAAO,CACb,KAAK,qBAAqB,EAClB,QAAA,MAAM,0BAA2BA,CAAK,CAChD,CACF,CAGQ,sBAAuB,CAC7B,GAAG,KAAK,gBACN,OAEG,KAAA,eAAiB,SAAS,cAAc,KAAK,EAC7C,KAAA,eAAe,UAAU,IAAI,OAAO,EAEnC,MAAAI,EAAO,SAAS,cAAc,KAAK,EACpCA,EAAA,UAAU,IAAI,MAAM,EAEpB,KAAA,eAAe,YAAYA,CAAI,EAEpC,KAAK,eAAe,iBAAiB,QAAS,KAAK,eAAe,KAAK,IAAI,CAAC,EAEvE,KAAA,sBAAsB,KAAK,cAAc,EACzC,KAAA,aAAa,YAAY,KAAK,cAAc,EACjD,KAAK,gBAAkB,EACzB,CAEQ,sBAAuB,CAC7B,KAAK,eAAe,SACpB,KAAK,eAAiB,KACtB,KAAK,gBAAkB,EACzB,CAGQ,sBAAsBC,EAAiB,CAC7C,SAASC,GAAoB,CACpB,OAAA,KAAK,MAAM,KAAK,OAAA,GAAY,SAAS,gBAAgB,YAAc,GAAI,CAChF,CACA,MAAMC,EAASD,IACTE,EAAOF,IAEbD,EAAG,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKHE,CAAM;AAAA,UAGtB,MAAME,EAAoB,IAGpBC,EAAoBL,EAAG,QAAQ,CACnC,CAAC,IAAK,QAAQ,EACd,CAAC,IAAK,GAAG,SAAS,gBAAgB,YAAY,IAAI,CAAA,EACjD,CACD,SAAUI,EACV,OAAQ,SACR,KAAM,UAAA,CACP,EAG2BJ,EAAG,QAAQ,CACrC,CAAC,KAAM,GAAGE,CAAM,IAAI,EACpB,CAAC,KAAM,GAAGC,CAAI,IAAI,CAAA,EACjB,CACD,SAAUC,EACV,OAAQ,cACR,KAAM,UAAA,CACP,EAGDC,EAAkB,SAAW,IAAM,CACjC,KAAK,qBAAqB,CAAA,CAE9B,CACF,CAGA,MAAeC,EAAA,IAAIf"}